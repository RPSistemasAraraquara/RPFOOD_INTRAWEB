unit RPFood.Migrations.M0000001.EmpresaCriarTabela;

interface

uses
  System.SysUtils,
  System.DateUtils,
  M4D.RegistryMigrations,
  RPFood.Migrations.Init;

type
  TRPFoodMigrationsM0000001EmpresaCriarTabela = class(TMigrations)
  public
    procedure Setup; override;
    procedure Up; override;
  end;

implementation

{ TRPFoodMigrationsM0000001EmpresaCriarTabela }

procedure TRPFoodMigrationsM0000001EmpresaCriarTabela.Setup;
begin
  Self.Version := 'Criação do Banco de Dados Inicial';
  Self.SeqVersion := 1;
  Self.DateTime := StrToDateTime('19/04/2025 16:23:10');
end;

procedure TRPFoodMigrationsM0000001EmpresaCriarTabela.Up;
begin
  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS bairro(                                     ')
  .SQL(' bai_001 integer NOT NULL,                                              ')
  .SQL(' emp_001 integer NOT NULL,                                              ')
  .SQL(' bai_002 character varying(60) COLLATE pg_catalog."default" NOT NULL,   ')
  .SQL(' bai_003 numeric(15, 2),                                                ')
  .SQL(' sit_001 integer NOT NULL DEFAULT 4,                                    ')
  .SQL(' b_restricao_entrega boolean NOT NULL DEFAULT false,                    ')
  .SQL(' CONSTRAINT pk_bairro PRIMARY KEY (bai_001, emp_001))                   ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS bairro_ceps (                               ')
  .SQL(' bai_001 integer NOT NULL,                                              ')
  .SQL(' emp_001 integer NOT NULL,                                              ')
  .SQL(' cep character varying(9) COLLATE pg_catalog."default" NOT NULL,        ')
  .SQL(' logradouro character varying(125) COLLATE pg_catalog."default",        ')
  .SQL(' id_cidade integer,                                                     ')
  .SQL(' cidade_desc character varying(75) COLLATE pg_catalog."default",        ')
  .SQL(' uf_sigla character varying(2) COLLATE pg_catalog."default",            ')
  .SQL(' CONSTRAINT pk_bairro_ceps PRIMARY KEY (bai_001, emp_001, cep))         ')
  .ExecSQL;


  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS  clientes (                                                                 ')
  .SQL(' id_empresa integer NOT NULL DEFAULT 1,                                                                 ')
  .SQL(' cli_004 character varying(20) COLLATE pg_catalog."default",                                            ')
  .SQL(' sit_001 integer NOT NULL DEFAULT 4,                                                                    ')
  .SQL(' observacao text COLLATE pg_catalog."default",                                                          ')
  .SQL(' senha_email character varying(100) COLLATE pg_catalog."default",                                       ')
  .SQL(' pontos_atuais integer,                                                                                 ')
  .SQL(' email character varying(100) COLLATE pg_catalog."default",                                             ')
  .SQL(' tipo_pessoa character varying(1) COLLATE pg_catalog."default" DEFAULT ''F''::character varying,        ')
  .SQL(' celular1 character varying(30) COLLATE pg_catalog."default",                                           ')
  .SQL(' cli_001 integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),  ')
  .SQL(' cli_012 character varying(50) COLLATE pg_catalog."default",                                            ')
  .SQL(' cli_002 character varying(100) COLLATE pg_catalog."default")                                           ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS public.clientes_endereco (                                                                          ')
  .SQL(' id_endereco integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),  ')
  .SQL(' cli_001 integer NOT NULL,                                                                                                      ')
  .SQL(' id_empresa integer NOT NULL,                                                                                                    ')
  .SQL(' cep_002 character varying(9) COLLATE pg_catalog."default",                                                                      ')
  .SQL(' cep_003 character varying(50) COLLATE pg_catalog."default",                                                                     ')
  .SQL(' cep_004 character varying(125) COLLATE pg_catalog."default",                                                                    ')
  .SQL(' cli_007 character varying(80) COLLATE pg_catalog."default",                                                                     ')
  .SQL(' cli_008 character varying(100) COLLATE pg_catalog."default",                                                                    ')
  .SQL(' cli_009 character varying(100) COLLATE pg_catalog."default",                                                                    ')
  .SQL(' bai_001 integer,                                                                                                                ')
  .SQL(' endereco_padrao boolean DEFAULT false,                                                                                          ')
  .SQL(' taxa numeric(15, 3),                                                                                                            ')
  .SQL(' idcidade integer,                                                                                                               ')
  .SQL(' uf character varying(50) COLLATE pg_catalog."default",                                                                          ')
  .SQL(' CONSTRAINT pk_clientes_endereco PRIMARY KEY (id_endereco, id_empresa))                                                          ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS configuracao_funcionamento (                                                    ')
  .SQL(' dia_segunda boolean NOT NULL DEFAULT false,                                                                ')
  .SQL(' dia_terca boolean NOT NULL DEFAULT false,                                                                  ')
  .SQL(' dia_quarta boolean NOT NULL DEFAULT false,                                                                 ')
  .SQL(' dia_quinta boolean NOT NULL DEFAULT false,                                                                 ')
  .SQL(' dia_sexta boolean NOT NULL DEFAULT false,                                                                  ')
  .SQL(' dia_sabado boolean NOT NULL DEFAULT false,                                                                 ')
  .SQL(' dia_domingo boolean NOT NULL DEFAULT false,                                                                ')
  .SQL(' segunda_inicio_atendimento time without time zone NOT NULL DEFAULT ''00:00:00''::time without time zone,   ')
  .SQL(' terca_inicio_atendimento time without time zone NOT NULL DEFAULT ''00:00:00''::time without time zone,     ')
  .SQL(' quarta_inicio_atendimento time without time zone NOT NULL DEFAULT ''00:00:00''::time without time zone,    ')
  .SQL(' quinta_inicio_atendimento time without time zone NOT NULL DEFAULT ''00:00:00''::time without time zone,    ')
  .SQL(' sexta_inicio_atendimento time without time zone NOT NULL DEFAULT ''00:00:00''::time without time zone,     ')
  .SQL(' sabado_inicio_atendimento time without time zone NOT NULL DEFAULT ''00:00:00''::time without time zone,    ')
  .SQL(' domingo_inicio_atendimento time without time zone NOT NULL DEFAULT ''00:00:00''::time without time zone,   ')
  .SQL(' segunda_fim_atendimento time without time zone NOT NULL DEFAULT ''00:00:00''::time without time zone,      ')
  .SQL(' terca_fim_atendimento time without time zone NOT NULL DEFAULT ''00:00:00''::time without time zone,        ')
  .SQL(' quarta_fim_atendimento time without time zone NOT NULL DEFAULT ''00:00:00''::time without time zone,       ')
  .SQL(' quinta_fim_atendimento time without time zone NOT NULL DEFAULT ''00:00:00''::time without time zone,       ')
  .SQL(' sexta_fim_atendimento time without time zone NOT NULL DEFAULT ''00:00:00''::time without time zone,        ')
  .SQL(' sabado_fim_atendimento time without time zone NOT NULL DEFAULT ''00:00:00''::time without time zone,       ')
  .SQL(' domingo_fim_atendimento time without time zone NOT NULL DEFAULT ''00:00:00''::time without time zone,      ')
  .SQL(' id_empresa integer NOT NULL,                                                                               ')
  .SQL(' id serial NOT NULL,                                                                                        ')
  .SQL('CONSTRAINT configuracao_funcionamento_pkey PRIMARY KEY (id) )                                               ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS  configuracao_rpfood  (     ')
  .SQL(' id_empresa integer NOT NULL DEFAULT 1,                 ')
  .SQL(' tempo_retirada_rpfood integer NOT NULL DEFAULT 0,      ')
  .SQL(' tempo_entrega_rpfood integer NOT NULL DEFAULT 0,       ')
  .SQL(' utiliza_tipo_entrega_retirada boolean DEFAULT true,    ')
  .SQL(' modo_acougue boolean NOT NULL DEFAULT false,           ')
  .SQL(' pedido_minimo numeric(15, 2) NOT NULL DEFAULT 0.00,    ')
  .SQL(' id serial NOT NULL,                                    ')
  .SQL(' utiliza_controle_opcionais boolean DEFAULT false,      ')
  .SQL(' utiliza_controle_ceps boolean DEFAULT true,            ')
  .SQL(' CONSTRAINT configuracao_rpfood_pkey PRIMARY KEY (id))  ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS  empresas (                                 ')
  .SQL(' descricao character varying(40) COLLATE pg_catalog."default",          ')
  .SQL(' codiuf integer,                                                        ')
  .SQL(' codicidade integer,                                                    ')
  .SQL(' uf character varying(2) COLLATE pg_catalog."default",                  ')
  .SQL(' cidade character varying(30) COLLATE pg_catalog."default",             ')
  .SQL(' bairro character varying(30) COLLATE pg_catalog."default",             ')
  .SQL(' endereco character varying(60) COLLATE pg_catalog."default",           ')
  .SQL(' tipoendereco character varying(30) COLLATE pg_catalog."default",       ')
  .SQL(' nome character varying(60) COLLATE pg_catalog."default",               ')
  .SQL(' razsoc character varying(60) COLLATE pg_catalog."default",             ')
  .SQL(' cnpj character varying(18) COLLATE pg_catalog."default",               ')
  .SQL(' cep character varying(20) COLLATE pg_catalog."default",                ')
  .SQL(' numero character varying(20) COLLATE pg_catalog."default",             ')
  .SQL(' fone1 character varying(30) COLLATE pg_catalog."default",              ')
  .SQL(' descrifone1 character varying(20) COLLATE pg_catalog."default",        ')
  .SQL(' ddd1 character(3) COLLATE pg_catalog."default",                        ')
  .SQL(' email character varying(100) COLLATE pg_catalog."default",             ')
  .SQL(' site character varying(100) COLLATE pg_catalog."default",              ')
  .SQL(' complemento character varying(100) COLLATE pg_catalog."default",       ')
  .SQL(' id_situacao integer NOT NULL DEFAULT 4,                                ')
  .SQL(' inscricao_estadual character varying(18) COLLATE pg_catalog."default", ')
  .SQL(' id_empresa integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ), ')
  .SQL('CONSTRAINT empresas_pkey PRIMARY KEY (id_empresa))                      ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS  formapgto (                       ')
  .SQL(' id integer NOT NULL,                                          ')
  .SQL(' id_empresa integer NOT NULL,                                  ')
  .SQL(' descricao character varying(50) COLLATE pg_catalog."default", ')
  .SQL(' id_situacao integer,                                          ')
  .SQL(' b_venda_web boolean DEFAULT false,                            ')
  .SQL(' sfi_codigo integer,                                           ')
  .SQL(' CONSTRAINT formapgto_pkey PRIMARY KEY (id, id_empresa))       ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS grupos  (                          ')
  .SQL(' codigo integer NOT NULL,                                      ')
  .SQL(' descricao character varying(60) COLLATE pg_catalog."default", ')
  .SQL(' img bytea,                                                    ')
  .SQL(' id_situacao integer NOT NULL DEFAULT 4,                       ')
  .SQL(' id_empresa integer NOT NULL,                                  ')
  .SQL(' b_exibir_web boolean NOT NULL DEFAULT false,                  ')
  .SQL(' CONSTRAINT grupos_pkey PRIMARY KEY (codigo, id_empresa))      ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS happy_hour (           ')
  .SQL(' id serial NOT NULL,                               ')
  .SQL(' idproduto integer NOT NULL,                       ')
  .SQL(' idempresa integer NOT NULL,                       ')
  .SQL(' horainicial time without time zone NOT NULL,      ')
  .SQL(' horafinal time without time zone NOT NULL,        ')
  .SQL(' segundafeira boolean NOT NULL,                    ')
  .SQL(' tercafeira boolean NOT NULL,                      ')
  .SQL(' quartafeira boolean NOT NULL,                     ')
  .SQL(' quintafeira boolean NOT NULL,                     ')
  .SQL(' sextafeira boolean NOT NULL,                      ')
  .SQL(' sabado boolean NOT NULL,                          ')
  .SQL(' domingo boolean NOT NULL,                         ')
  .SQL(' valor numeric(15, 3) NOT NULL,                    ')
  .SQL(' utiliza_mesa boolean DEFAULT false,               ')
  .SQL(' utiliza_delivery boolean DEFAULT false,           ')
  .SQL(' CONSTRAINT happy_hour_pkey PRIMARY KEY (id))      ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS mesa (                           ')
  .SQL(' mes_001 integer,                                            ')
  .SQL(' emp_001 integer,                                            ')
  .SQL(' mes_002 character varying(30) COLLATE pg_catalog."default", ')
  .SQL(' mes_003 integer,                                            ')
  .SQL(' id_situacao integer DEFAULT 4)                              ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS migrations_info (                 ')
  .SQL(' sequence integer NOT NULL,                                   ')
  .SQL(' version character varying(255) COLLATE pg_catalog."default", ')
  .SQL(' datetime timestamp without time zone,                        ')
  .SQL(' start_of_execution timestamp without time zone,              ')
  .SQL(' end_of_execution timestamp without time zone,                ')
  .SQL(' duration_of_execution integer,                               ')
  .SQL(' CONSTRAINT migrations_info_pkey PRIMARY KEY (sequence))      ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS  opcional (                                 ')
  .SQL(' codigo integer NOT NULL,                                               ')
  .SQL(' id_empresa integer NOT NULL,                                           ')
  .SQL(' descricao character varying(100) COLLATE pg_catalog."default" NOT NULL,')
  .SQL(' valor numeric(15, 2) NOT NULL,                                         ')
  .SQL(' id_situacao integer NOT NULL DEFAULT 4,                                ')
  .SQL(' opc_p character varying(100) COLLATE pg_catalog."default",             ')
  .SQL(' opc_m character varying(100) COLLATE pg_catalog."default",             ')
  .SQL(' opc_g character varying(100) COLLATE pg_catalog."default",             ')
  .SQL(' opc_extra character varying(100) COLLATE pg_catalog."default",         ')
  .SQL(' valor_opc_p numeric(15, 2) DEFAULT 0.00,                               ')
  .SQL(' valor_opc_g numeric(15, 2) DEFAULT 0.00,                               ')
  .SQL(' valor_opc_m numeric(15, 2) DEFAULT 0.00,                               ')
  .SQL(' valor_opc_gg numeric(15, 2) DEFAULT 0.00,                              ')
  .SQL(' valor_opc_extra numeric(15, 2) DEFAULT 0.00,                           ')
  .SQL(' tipo integer NOT NULL DEFAULT 0,                                       ')
  .SQL(' opc_gg character varying(100) COLLATE pg_catalog."default",            ')
  .SQL(' imagem_db bytea,                                                       ')
  .SQL(' CONSTRAINT opcional_pkey PRIMARY KEY (codigo, id_empresa))             ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS  produtos (                                   ')
  .SQL(' codigo integer NOT NULL,                                                 ')
  .SQL(' descricao character varying(60) COLLATE pg_catalog."default",            ')
  .SQL(' codigrupo integer,                                                       ')
  .SQL(' valfinal numeric(15, 2),                                                 ')
  .SQL(' valcompra numeric(15, 2),                                                ')
  .SQL(' observacao character varying(1200) COLLATE pg_catalog."default",         ')
  .SQL(' img1 bytea,                                                              ')
  .SQL(' img2 bytea,                                                              ')
  .SQL(' img bytea,                                                               ')
  .SQL(' id_situacao integer NOT NULL DEFAULT 4,                                  ')
  .SQL(' id_empresa integer NOT NULL,                                             ')
  .SQL(' b_venda_web boolean NOT NULL DEFAULT false,                              ')
  .SQL(' utiliza_combo boolean NOT NULL DEFAULT false,                            ')
  .SQL(' b_destaque_web boolean DEFAULT false,                                    ')
  .SQL(' b_permite_frac boolean NOT NULL DEFAULT true,                            ')
  .SQL(' tamanho_p character varying(100) COLLATE pg_catalog."default",           ')
  .SQL(' tamanho_m character varying(100) COLLATE pg_catalog."default",           ')
  .SQL(' tamanho_g character varying(100) COLLATE pg_catalog."default",           ')
  .SQL(' tamanho_gg character varying(100) COLLATE pg_catalog."default",          ')
  .SQL(' tamanho_extra character varying(100) COLLATE pg_catalog."default",       ')
  .SQL(' tamanho_padrao character varying(2) COLLATE pg_catalog."default" DEFAULT ''M''::character varying,    ')
  .SQL(' valor_tam_p numeric(15, 2) DEFAULT 0.00,                                  ')
  .SQL(' valor_tam_m numeric(15, 2) DEFAULT 0.00,                                  ')
  .SQL(' valor_tam_g numeric(15, 2) DEFAULT 0.00,                                  ')
  .SQL(' valor_tam_gg numeric(15, 2) DEFAULT 0.00,                                 ')
  .SQL(' b_venda_tamanho boolean DEFAULT false,                                    ')
  .SQL(' valor_tam_extra numeric(15, 2) DEFAULT 0.00,                              ')
  .SQL(' b_carrossel boolean DEFAULT false,                                        ')
  .SQL(' utiliza_promocao boolean DEFAULT false,                                   ')
  .SQL(' b_exporta_peso_balanca boolean DEFAULT false,                             ')
  .SQL(' b_peso_balanca boolean NOT NULL DEFAULT false,                            ')
  .SQL(' restringirvenda boolean DEFAULT false,                                    ')
  .SQL(' utiliza_happy_hour boolean DEFAULT false,                                 ')
  .SQL(' opcional_minimo integer DEFAULT 0,                                        ')
  .SQL(' opcional_maximo integer DEFAULT 0,                                        ')
  .SQL(' CONSTRAINT produtos_pkey PRIMARY KEY (codigo, id_empresa))                ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS produtos_opcional (   ')
  .SQL(' id_empresa integer NOT NULL,                     ')
  .SQL(' id_material integer NOT NULL,                    ')
  .SQL(' id_opcional integer NOT NULL )                   ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS promocao (                              ')
  .SQL(' id_promocao integer NOT NULL,                                      ')
  .SQL(' id_empresa integer NOT NULL,                                       ')
  .SQL(' id_material integer NOT NULL,                                      ')
  .SQL(' tipo_desconto integer NOT NULL DEFAULT 0,                          ')
  .SQL(' segundafeira boolean NOT NULL DEFAULT false,                       ')
  .SQL(' tercafeira boolean NOT NULL DEFAULT false,                         ')
  .SQL(' quartafeira boolean NOT NULL DEFAULT false,                        ')
  .SQL(' quintafeira boolean NOT NULL DEFAULT false,                        ')
  .SQL(' sextafeira boolean NOT NULL DEFAULT false,                         ')
  .SQL(' sabado boolean NOT NULL DEFAULT false,                             ')
  .SQL(' domingo boolean NOT NULL DEFAULT false,                            ')
  .SQL(' tipomesa boolean NOT NULL DEFAULT false,                           ')
  .SQL(' tipodelivery boolean NOT NULL DEFAULT false,                       ')
  .SQL(' tipocomanda boolean NOT NULL DEFAULT false,                        ')
  .SQL(' descontosegundapadrao numeric(15, 3) DEFAULT 0,                    ')
  .SQL(' descontosegundatamanhop numeric(15, 3) DEFAULT 0,                  ')
  .SQL(' descontosegundatamanhom numeric(15, 3) DEFAULT 0,                  ')
  .SQL(' descontosegundatamanhog numeric(15, 3) DEFAULT 0,                  ')
  .SQL(' descontosegundatamanhogg numeric(15, 3) DEFAULT 0,                 ')
  .SQL(' descontosegundatamanhoextra numeric(15, 3) DEFAULT 0,              ')
  .SQL(' desconto_ter_padrao numeric(15, 3) DEFAULT 0,                      ')
  .SQL(' desconto_ter_tam_p numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_ter_tam_m numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_ter_tam_g numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_ter_tam_gg numeric(15, 3) DEFAULT 0,                      ')
  .SQL(' desconto_ter_tam_extra numeric(15, 3) DEFAULT 0,                   ')
  .SQL(' desconto_qua_padrao numeric(15, 3) DEFAULT 0,                      ')
  .SQL(' desconto_qua_tam_p numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_qua_tam_m numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_qua_tam_g numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_qua_tam_gg numeric(15, 3) DEFAULT 0,                      ')
  .SQL(' desconto_qua_tam_extra numeric(15, 3) DEFAULT 0,                   ')
  .SQL(' desconto_qui_padrao numeric(15, 3) DEFAULT 0,                      ')
  .SQL(' desconto_qui_tam_p numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_qui_tam_m numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_qui_tam_g numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_qui_tam_gg numeric(15, 3) DEFAULT 0,                      ')
  .SQL(' desconto_qui_tam_extra numeric(15, 3) DEFAULT 0,                   ')
  .SQL(' desconto_sex_padrao numeric(15, 3) DEFAULT 0,                      ')
  .SQL(' desconto_sex_tam_p numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_sex_tam_m numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_sex_tam_g numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_sex_tam_gg numeric(15, 3) DEFAULT 0,                      ')
  .SQL(' desconto_sex_tam_extra numeric(15, 3) DEFAULT 0,                   ')
  .SQL(' desconto_sab_padrao numeric(15, 3) DEFAULT 0,                      ')
  .SQL(' desconto_sab_tam_p numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_sab_tam_m numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_sab_tam_g numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_sab_tam_gg numeric(15, 3) DEFAULT 0,                      ')
  .SQL(' desconto_sab_tam_extra numeric(15, 3) DEFAULT 0,                   ')
  .SQL(' desconto_dom_padrao numeric(15, 3) DEFAULT 0,                      ')
  .SQL(' desconto_dom_tam_p numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_dom_tam_m numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_dom_tam_g numeric(15, 3) DEFAULT 0,                       ')
  .SQL(' desconto_dom_tam_gg numeric(15, 3) DEFAULT 0,                      ')
  .SQL(' desconto_dom_tam_extra numeric(15, 3) DEFAULT 0,                   ')
  .SQL(' CONSTRAINT pk_promocao PRIMARY KEY (id_promocao, id_empresa))      ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS restricoesvendas (    ')
  .SQL(' idempresa integer,                               ')
  .SQL(' idproduto integer,                               ')
  .SQL(' segundafeira boolean DEFAULT false,              ')
  .SQL(' tercafeira boolean DEFAULT false,                ')
  .SQL(' quartafeira boolean DEFAULT false,               ')
  .SQL(' quintafeira boolean DEFAULT false,               ')
  .SQL(' sextafeira boolean DEFAULT false,                ')
  .SQL(' sabado boolean DEFAULT false,                    ')
  .SQL(' domingo boolean DEFAULT false )                  ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS sincronizacao(  ')
  .SQL(' id integer NOT NULL,                       ')
  .SQL(' data timestamp without time zone NOT NULL, ')
  .SQL(' id_empresa integer NOT NULL )              ')
  .ExecSQL;

  FQueryMigration
  .SQL(' COMMENT ON COLUMN sincronizacao.id   ')
  .SQL(' IS '' ID de sincronizacao''          ')
  .ExecSQL;

  FQueryMigration
  .SQL(' COMMENT ON COLUMN sincronizacao.data ')
  .SQL('IS ''Data da sincronizacao''          ')
  .ExecSQL;

  FQueryMigration
  .SQL(' COMMENT ON COLUMN  sincronizacao.id_empresa  ')
  .SQL(' IS ''ID da empresa''                         ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS  transferencia_imagens (                 ')
  .SQL(' id serial NOT NULL,                                                 ')
  .SQL(' tipo character varying(10) COLLATE pg_catalog."default" NOT NULL,   ')
  .SQL(' id_empresa integer NOT NULL DEFAULT 1,                              ')
  .SQL(' id_registro integer NOT NULL )                                      ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS  usuarios (                     ')
  .SQL(' codigo integer NOT NULL,                                   ')
  .SQL(' nome character varying(30) COLLATE pg_catalog."default",   ')
  .SQL(' senha character varying(60) COLLATE pg_catalog."default",  ')
  .SQL(' email character varying(100) COLLATE pg_catalog."default", ')
  .SQL(' id_situacao integer NOT NULL DEFAULT 4,                    ')
  .SQL(' CONSTRAINT pk_usuarios PRIMARY KEY (codigo))               ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS  usuarios_empresa (                             ')
  .SQL(' codigo_usuario integer NOT NULL,                                           ')
  .SQL(' id_empresa integer NOT NULL,                                               ')
  .SQL(' CONSTRAINT pk_usuarios_empresa PRIMARY KEY (codigo_usuario, id_empresa))   ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS usuarios_permissoes  (   ')
  .SQL(' codigo_usuario integer NOT NULL,                    ')
  .SQL(' b_acesso_web boolean DEFAULT false,                 ')
  .SQL(' b_admin_web boolean DEFAULT false,                  ')
  .SQL(' id_empresa integer NOT NULL DEFAULT 1 )             ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS venda (                                                                                           ')
  .SQL(' id_venda integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),   ')
  .SQL(' id_empresa integer NOT NULL,                                                                                                 ')
  .SQL(' id_situacao integer NOT NULL,                                                                                                ')
  .SQL(' id_formapgto integer NOT NULL,                                                                                               ')
  .SQL(' id_cliente integer NOT NULL,                                                                                                 ')
  .SQL(' totals_products numeric(15, 2),                                                                                              ')
  .SQL(' sub_total numeric(15, 2),                                                                                                    ')
  .SQL(' taxa_entrega numeric(15, 2),                                                                                                 ')
  .SQL(' troco numeric(15, 2),                                                                                                        ')
  .SQL(' valor_receber numeric(15, 2),                                                                                                ')
  .SQL(' sales numeric(15, 2),                                                                                                        ')
  .SQL(' data_pedido timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,                                                  ')
  .SQL(' b_recebido_lecheff boolean NOT NULL DEFAULT false,                                                                           ')
  .SQL(' tipo_entrega character varying(2) COLLATE pg_catalog."default" NOT NULL DEFAULT ''D''::character varying,                    ')
  .SQL(' observacao character varying(200) COLLATE pg_catalog."default",                                                              ')
  .SQL(' CONSTRAINT pk_venda PRIMARY KEY (id_venda, id_empresa))                                                                      ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS venda_endereco (                               ')
  .SQL(' id_venda integer NOT NULL,                                                ')
  .SQL(' id_cliente integer NOT NULL,                                              ')
  .SQL(' id_bairro integer,                                                        ')
  .SQL(' cep character varying(14) COLLATE pg_catalog."default" NOT NULL,          ')
  .SQL(' logradouro character varying(150) COLLATE pg_catalog."default" NOT NULL,  ')
  .SQL(' numero character varying(30) COLLATE pg_catalog."default",                ')
  .SQL(' complemento character varying(150) COLLATE pg_catalog."default",          ')
  .SQL(' ponto_referencia character varying(150) COLLATE pg_catalog."default",     ')
  .SQL(' bairro_desc character varying(100) COLLATE pg_catalog."default",          ')
  .SQL(' id_endereco integer,                                                      ')
  .SQL(' CONSTRAINT venda_endereco_pkey PRIMARY KEY (id_venda, id_cliente))        ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS  vendaitem   (                                 ')
  .SQL(' id_venda integer NOT NULL,                                                ')
  .SQL(' id_empresa integer NOT NULL,                                              ')
  .SQL(' id_product integer NOT NULL,                                              ')
  .SQL(' numero_item integer NOT NULL,                                             ')
  .SQL(' quantidade numeric(15, 4) NOT NULL DEFAULT 0,                             ')
  .SQL(' valor_unit_product numeric(15, 4) NOT NULL DEFAULT 0,                     ')
  .SQL(' totals_products numeric(15, 4) NOT NULL DEFAULT 0,                        ')
  .SQL(' id_situacao integer,                                                      ')
  .SQL(' tamanho character varying(40) COLLATE pg_catalog."default",               ')
  .SQL(' b_venda_tamanho boolean DEFAULT false,                                    ')
  .SQL(' item_fracionado integer,                                                  ')
  .SQL(' observacao character varying(150) COLLATE pg_catalog."default",           ')
  .SQL(' utilizou_happy_hour boolean DEFAULT false,                                ')
  .SQL(' CONSTRAINT pk_vendaitem PRIMARY KEY (id_venda, id_empresa, numero_item))  ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS vendaitemopcional (            ')
  .SQL(' id_venda integer NOT NULL,                                ')
  .SQL(' id_empresa integer NOT NULL,                              ')
  .SQL(' id_numero_item integer NOT NULL,                          ')
  .SQL(' id_opcional integer NOT NULL,                             ')
  .SQL(' gratis numeric(15, 4) NOT NULL DEFAULT 0,                 ')
  .SQL(' valor numeric(15, 4) NOT NULL DEFAULT 0,                  ')
  .SQL(' valorunitario numeric(15, 4) NOT NULL DEFAULT 0,          ')
  .SQL(' valortotal numeric(15, 4) NOT NULL DEFAULT 0,             ')
  .SQL(' quantidade numeric(15, 4) NOT NULL DEFAULT 0,             ')
  .SQL(' quantidade_replicar numeric(15, 4) NOT NULL DEFAULT 0)    ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS vendamesa (                                ')
  .SQL(' id_venda integer,                                                     ')
  .SQL(' id_empresa integer,                                                   ')
  .SQL(' id_situacao integer,                                                  ')
  .SQL(' totals_products numeric(15, 3),                                       ')
  .SQL(' sub_total numeric(15, 3),                                             ')
  .SQL(' sales numeric(15, 3),                                                 ')
  .SQL(' data_pedido timestamp without time zone,                              ')
  .SQL(' b_recebido_lecheff boolean DEFAULT false,                             ')
  .SQL(' observacao character varying(300) COLLATE pg_catalog."default",       ')
  .SQL(' numero_mesa integer,                                                  ')
  .SQL(' descricao_mesa character varying(20) COLLATE pg_catalog."default"  )  ')
  .ExecSQL;


  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS vendamesaitem  (                                   ')
  .SQL(' id_venda integer NOT NULL,                                                    ')
  .SQL(' id_empresa integer NOT NULL,                                                  ')
  .SQL(' id_product integer NOT NULL,                                                  ')
  .SQL(' numero_item integer NOT NULL,                                                 ')
  .SQL(' quantidade numeric(15, 4) NOT NULL DEFAULT 0,                                 ')
  .SQL(' valor_unit_product numeric(15, 4) NOT NULL DEFAULT 0,                         ')
  .SQL(' totals_products numeric(15, 4) NOT NULL DEFAULT 0,                            ')
  .SQL(' id_situacao integer,                                                          ')
  .SQL(' tamanho character varying(2) COLLATE pg_catalog."default",                    ')
  .SQL(' b_venda_tamanho boolean DEFAULT false,                                        ')
  .SQL(' item_fracionado integer,                                                      ')
  .SQL(' observacao character varying(150) COLLATE pg_catalog."default",               ')
  .SQL(' b_recebido_lecheff boolean DEFAULT false,                                     ')
  .SQL(' utilizou_happy_hour boolean DEFAULT false,                                    ')
  .SQL(' utilizou_promocao boolean DEFAULT false,                                      ')
  .SQL(' CONSTRAINT pk_vendamesaitem PRIMARY KEY (id_venda, id_empresa, numero_item))  ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE TABLE IF NOT EXISTS vendas_status_log  (    ')
  .SQL(' id_venda integer NOT NULL,                         ')
  .SQL(' id_empresa integer NOT NULL DEFAULT 1,             ')
  .SQL(' id_situacao integer NOT NULL,                      ')
  .SQL(' data timestamp without time zone )                 ')
  .ExecSQL;


  FQueryMigration
  .SQL(' ALTER TABLE IF EXISTS bairro_ceps                              ')
  .SQL(' ADD CONSTRAINT fk_bairro_ceps FOREIGN KEY (bai_001, emp_001)   ')
  .SQL(' REFERENCES bairro (bai_001, emp_001) MATCH SIMPLE              ')
  .SQL(' ON UPDATE NO ACTION                                            ')
  .SQL(' ON DELETE CASCADE                                              ')
  .ExecSQL;


  FQueryMigration
  .SQL(' ALTER TABLE IF EXISTS formapgto                           ')
  .SQL(' ADD CONSTRAINT fk_formapgto_id FOREIGN KEY (id_empresa)   ')
  .SQL(' REFERENCES empresas (id_empresa) MATCH SIMPLE             ')
  .SQL(' ON UPDATE CASCADE                                         ')
  .SQL(' ON DELETE CASCADE                                         ')
  .ExecSQL;

  FQueryMigration
  .SQL(' ALTER TABLE IF EXISTS promocao                                                ')
  .SQL(' ADD CONSTRAINT fk_promocao_idmaterial FOREIGN KEY (id_material, id_empresa)   ')
  .SQL(' REFERENCES produtos (codigo, id_empresa) MATCH SIMPLE                         ')
  .SQL(' ON UPDATE NO ACTION                                                           ')
  .SQL(' ON DELETE CASCADE                                                             ')
  .ExecSQL;

  FQueryMigration
  .SQL(' ALTER TABLE IF EXISTS vendaitem                                 ')
  .SQL(' ADD CONSTRAINT fk_venda_item_empresa FOREIGN KEY (id_empresa)   ')
  .SQL(' REFERENCES empresas (id_empresa) MATCH SIMPLE                   ')
  .SQL(' ON UPDATE CASCADE                                               ')
  .SQL(' ON DELETE CASCADE                                               ')
  .ExecSQL;

  FQueryMigration
  .SQL(' CREATE OR REPLACE FUNCTION public.is_atendimento_disponivel( )                         ')
  .SQL(' RETURNS boolean                                                                        ')
  .SQL(' LANGUAGE ''plpgsql''                                                                   ')
  .SQL(' COST 100                                                                               ')
  .SQL(' VOLATILE PARALLEL UNSAFE                                                               ')
  .SQL(' AS $BODY$                                                                              ')
  .SQL(' DECLARE                                                                                ')
  .SQL(' atendimento_disponivel BOOLEAN := false;                                               ')
  .SQL(' config configuracao_funcionamento%ROWTYPE;                                             ')
  .SQL(' current_day_of_week INTEGER;                                                           ')
  .SQL(' current_local_time TIME;                                                               ')
  .SQL(' BEGIN                                                                                  ')
  .SQL(' current_day_of_week := EXTRACT(DOW FROM CURRENT_DATE)::INTEGER;                        ')
  .SQL(' current_local_time := (SELECT Current_Time at time zone ''America/Sao_Paulo'');        ')
  .SQL(' SELECT * INTO config FROM configuracao_funcionamento LIMIT 1;                          ')
  .SQL(' CASE current_day_of_week                                                               ')
  .SQL(' WHEN 1 THEN                                                                            ')
  .SQL(' atendimento_disponivel := config.dia_segunda AND                                       ')
  .SQL(' current_local_time >= config.segunda_inicio_atendimento AND                            ')
  .SQL(' current_local_time <= config.segunda_fim_atendimento;                                  ')
  .SQL(' WHEN 2 THEN                                                                            ')
  .SQL(' atendimento_disponivel := config.dia_terca AND                                         ')
  .SQL(' current_local_time >= config.terca_inicio_atendimento AND                              ')
  .SQL(' current_local_time <= config.terca_fim_atendimento;                                    ')
  .SQL(' WHEN 3 THEN                                                                            ')
  .SQL(' atendimento_disponivel := config.dia_quarta AND                                        ')
  .SQL(' current_local_time >= config.quarta_inicio_atendimento AND                             ')
  .SQL(' current_local_time <= config.quarta_fim_atendimento;                                   ')
  .SQL(' WHEN 4 THEN                                                                            ')
  .SQL(' atendimento_disponivel := config.dia_quinta AND                                        ')
  .SQL(' current_local_time >= config.quinta_inicio_atendimento AND                             ')
  .SQL(' current_local_time <= config.quinta_fim_atendimento;                                   ')
  .SQL(' WHEN 5 THEN                                                                            ')
  .SQL(' atendimento_disponivel := config.dia_sexta AND                                         ')
  .SQL(' current_local_time >= config.sexta_inicio_atendimento AND                              ')
  .SQL(' current_local_time <= config.sexta_fim_atendimento;                                    ')
  .SQL(' WHEN 6 THEN                                                                            ')
  .SQL(' atendimento_disponivel := config.dia_sabado AND                                        ')
  .SQL(' current_local_time >= config.sabado_inicio_atendimento AND                             ')
  .SQL(' current_local_time <= config.sabado_fim_atendimento;                                   ')
  .SQL(' WHEN 0 THEN                                                                            ')
  .SQL(' atendimento_disponivel := config.dia_domingo AND                                       ')
  .SQL(' current_local_time >= config.domingo_inicio_atendimento AND                            ')
  .SQL(' current_local_time <= config.domingo_fim_atendimento;                                  ')
  .SQL(' END CASE;                                                                              ')
  .SQL(' RETURN atendimento_disponivel;                                                         ')
  .SQL(' END;                                                                                   ')
  .SQL(' $BODY$;                                                                                ')
  .SQL(' ALTER FUNCTION public.is_atendimento_disponivel()                                      ')
  .SQL(' OWNER TO postgres;                                                                     ')
  .ExecSQL;
end;

initialization
  TM4DRegistryMigrations.GetInstance.Add(TRPFoodMigrationsM0000001EmpresaCriarTabela);

end.
